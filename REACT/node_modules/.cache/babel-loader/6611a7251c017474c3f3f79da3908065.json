{"ast":null,"code":"import _toConsumableArray from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/DATA/PhotoGram/REACT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/DATA/PhotoGram/REACT/src/pages/Feed/Feed.js\";\nimport React, { Component, Fragment } from 'react';\nimport Post from '../../components/Feed/Post/Post';\nimport Button from '../../components/Button/Button';\nimport FeedEdit from '../../components/Feed/FeedEdit/FeedEdit';\nimport Input from '../../components/Form/Input/Input';\nimport Paginator from '../../components/Paginator/Paginator';\nimport Loader from '../../components/Loader/Loader';\nimport ErrorHandler from '../../components/ErrorHandler/ErrorHandler';\nimport './Feed.css';\n\nvar Feed = /*#__PURE__*/function (_Component) {\n  _inherits(Feed, _Component);\n\n  function Feed() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Feed);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Feed)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isEditing: false,\n      posts: [],\n      totalPosts: 0,\n      editPost: null,\n      status: '',\n      postPage: 1,\n      postsLoading: true,\n      editLoading: false\n    };\n\n    _this.loadPosts = function (direction) {\n      if (direction) {\n        _this.setState({\n          postsLoading: true,\n          posts: []\n        });\n      }\n\n      var page = _this.state.postPage;\n\n      if (direction === 'next') {\n        page++;\n\n        _this.setState({\n          postPage: page\n        });\n      }\n\n      if (direction === 'previous') {\n        page--;\n\n        _this.setState({\n          postPage: page\n        });\n      }\n\n      var graphqlQuery = {\n        query: \"\\n        query FetchPosts($page: Int) {\\n          posts(page: $page) {\\n            posts {\\n              _id\\n              title\\n              imageUrl\\n              content\\n              creator {\\n                name\\n              }\\n              createdAt\\n            }\\n            totalPosts\\n          }\\n        }\\n      \",\n        variables: {\n          page: page\n        }\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + _this.props.token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors) {\n          throw new Error('Fetching Posts Failed!');\n        }\n\n        _this.setState({\n          posts: resData.data.posts.posts.map(function (post) {\n            return _objectSpread({}, post, {\n              imagePath: post.imageUrl\n            });\n          }),\n          totalPosts: resData.data.posts.totalPosts,\n          postsLoading: false\n        });\n      }).catch(_this.catchError);\n    };\n\n    _this.statusUpdateHandler = function (event) {\n      event.preventDefault();\n      var graphqlQuery = {\n        query: \"\\n        mutation updateUserStatus($userStatus: String!) {\\n          updateStatus(status: $userStatus) {\\n            status\\n          }\\n        }\\n      \",\n        variables: {\n          userStatus: _this.state.status\n        }\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + _this.props.token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors) {\n          throw new Error('Updating Status Failed!');\n        } // console.log(resData);\n\n      }).catch(_this.catchError);\n    };\n\n    _this.newPostHandler = function () {\n      _this.setState({\n        isEditing: true\n      });\n    };\n\n    _this.startEditPostHandler = function (postId) {\n      _this.setState(function (prevState) {\n        var loadedPost = _objectSpread({}, prevState.posts.find(function (p) {\n          return p._id === postId;\n        }));\n\n        return {\n          isEditing: true,\n          editPost: loadedPost\n        };\n      });\n    };\n\n    _this.cancelEditHandler = function () {\n      _this.setState({\n        isEditing: false,\n        editPost: null\n      });\n    };\n\n    _this.finishEditHandler = function (postData) {\n      _this.setState({\n        editLoading: true\n      });\n\n      var formData = new FormData();\n      formData.append('image', postData.image);\n\n      if (_this.state.editPost) {\n        formData.append('oldPath', _this.state.editPost.imagePath);\n      }\n\n      fetch('http://localhost:8080/post-image', {\n        method: 'PUT',\n        headers: {\n          Authorization: 'Bearer ' + _this.props.token\n        },\n        body: formData\n      }).then(function (res) {\n        return res.json();\n      }).then(function (fileResData) {\n        var imageUrl = fileResData.filePath || 'undefined';\n        var graphqlQuery = {\n          query: \"\\n            mutation PutPost($title: String!, $content: String!, $imageurl: String!){\\n              createPost(postInput:{title: $title, \\n                                    content: $content, \\n                                    imageUrl: $imageUrl }) {\\n                _id\\n                title\\n                content\\n                imageUrl\\n                creator {\\n                  name\\n                }\\n                createdAt\\n              }\\n            }\\n    \\n          \",\n          variables: {\n            title: postData.title,\n            content: postData.content,\n            imageUrl: imageUrl\n          }\n        };\n\n        if (_this.state.editPost) {\n          graphqlQuery = {\n            query: \"\\n            mutation EditPost( $id: ID!, $title: String!, $content: String!, $imageurl: String! ) {\\n              updatePost(id: $id, postInput: {\\n                                    title: $title, \\n                                    content: $content, \\n                                    imageUrl: $imageUrl} ) {\\n                _id\\n                title\\n                content\\n                imageUrl\\n                creator {\\n                  name\\n                }\\n                createdAt\\n              }\\n            }\\n          \",\n            variables: {\n              id: _this.state.editPost._id,\n              title: postData.title,\n              content: postData.content,\n              imageUrl: imageUrl\n            }\n          };\n        }\n\n        return fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          body: JSON.stringify(graphqlQuery),\n          headers: {\n            Authorization: 'Bearer ' + _this.props.token,\n            'Content-Type': 'application/json'\n          }\n        });\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors && resData.errors[0].status === 422) {\n          throw new Error(\"Validation failed. Make sure the email address isn't used yet!\");\n        }\n\n        if (resData.errors) {\n          console.log(resData.errors);\n          throw new Error('Post Updation Failed!');\n        }\n\n        var resDataField = 'createPost';\n\n        if (_this.state.editPost) {\n          resDataField = 'updatePost';\n        }\n\n        var post = {\n          _id: resData.data[resDataField]._id,\n          title: resData.data[resDataField].title,\n          content: resData.data[resDataField].content,\n          creator: resData.data[resDataField].creator,\n          createdAt: resData.data[resDataField].createdAt,\n          imagePath: resData.data[resDataField].imageUrl\n        };\n\n        _this.setState(function (prevState) {\n          var updatedPosts = _toConsumableArray(prevState.posts);\n\n          if (prevState.editPost) {\n            var postIndex = prevState.posts.findIndex(function (p) {\n              return p._id === prevState.editPost._id;\n            });\n            updatedPosts[postIndex] = post;\n          } else {\n            if (prevState.posts.length >= 2) {\n              updatedPosts.pop();\n            }\n\n            updatedPosts.unshift(post);\n          }\n\n          return {\n            posts: updatedPosts,\n            isEditing: false,\n            editPost: null,\n            editLoading: false\n          };\n        });\n      }).catch(function (err) {\n        console.log(err);\n\n        _this.setState({\n          isEditing: false,\n          editPost: null,\n          editLoading: false,\n          error: err\n        });\n      });\n    };\n\n    _this.statusInputChangeHandler = function (input, value) {\n      _this.setState({\n        status: value\n      });\n    };\n\n    _this.deletePostHandler = function (postId) {\n      _this.setState({\n        postsLoading: true\n      });\n\n      var graphqlQuery = {\n        query: \"\\n      mutation DeletePost($id: ID) {\\n        deletePost(id: $id)\\n      }\\n\\n    \",\n        variables: {\n          id: postId\n        }\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + _this.props.token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors) {\n          console.log(resData.errors);\n          throw new Error('Deletion Failed!');\n        }\n\n        console.log(resData);\n\n        _this.loadPosts();\n      }).catch(function (err) {\n        console.log(err);\n\n        _this.setState({\n          postsLoading: false\n        });\n      });\n    };\n\n    _this.errorHandler = function () {\n      _this.setState({\n        error: null\n      });\n    };\n\n    _this.catchError = function (error) {\n      _this.setState({\n        error: error\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Feed, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var graphqlQuery = {\n        query: \"\\n        {\\n          user {\\n            status\\n          }\\n        }\\n      \\n      \"\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + this.props.token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors) {\n          throw new Error('Fetching Status Failed!');\n        }\n\n        _this2.setState({\n          status: resData.data.user.status\n        });\n      }).catch(this.catchError);\n      this.loadPosts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ErrorHandler, {\n        error: this.state.error,\n        onHandle: this.errorHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(FeedEdit, {\n        editing: this.state.isEditing,\n        selectedPost: this.state.editPost,\n        loading: this.state.editLoading,\n        onCancelEdit: this.cancelEditHandler,\n        onFinishEdit: this.finishEditHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"feed__status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.statusUpdateHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        placeholder: \"Your status\",\n        control: \"input\",\n        onChange: this.statusInputChangeHandler,\n        value: this.state.status,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        mode: \"flat\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }\n      }, \"Update\"))), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"feed__control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        mode: \"raised\",\n        design: \"accent\",\n        onClick: this.newPostHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }\n      }, \"New Post\")), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"feed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 9\n        }\n      }, this.state.postsLoading && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          textAlign: 'center',\n          marginTop: '2rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 15\n        }\n      })), this.state.posts.length <= 0 && !this.state.postsLoading ? /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }\n      }, \"No posts found.\") : null, !this.state.postsLoading && /*#__PURE__*/React.createElement(Paginator, {\n        onPrevious: this.loadPosts.bind(this, 'previous'),\n        onNext: this.loadPosts.bind(this, 'next'),\n        lastPage: Math.ceil(this.state.totalPosts / 2),\n        currentPage: this.state.postPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }\n      }, this.state.posts.map(function (post) {\n        return /*#__PURE__*/React.createElement(Post, {\n          key: post._id,\n          id: post._id,\n          author: post.creator.name,\n          date: new Date(post.createdAt).toLocaleDateString('en-US'),\n          title: post.title,\n          image: post.imageUrl,\n          content: post.content,\n          onStartEdit: _this3.startEditPostHandler.bind(_this3, post._id),\n          onDelete: _this3.deletePostHandler.bind(_this3, post._id),\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 17\n          }\n        });\n      }))));\n    }\n  }]);\n\n  return Feed;\n}(Component);\n\nexport default Feed;","map":{"version":3,"sources":["/Volumes/DATA/PhotoGram/REACT/src/pages/Feed/Feed.js"],"names":["React","Component","Fragment","Post","Button","FeedEdit","Input","Paginator","Loader","ErrorHandler","Feed","state","isEditing","posts","totalPosts","editPost","status","postPage","postsLoading","editLoading","loadPosts","direction","setState","page","graphqlQuery","query","variables","fetch","method","headers","Authorization","props","token","body","JSON","stringify","then","res","json","resData","errors","Error","data","map","post","imagePath","imageUrl","catch","catchError","statusUpdateHandler","event","preventDefault","userStatus","newPostHandler","startEditPostHandler","postId","prevState","loadedPost","find","p","_id","cancelEditHandler","finishEditHandler","postData","formData","FormData","append","image","fileResData","filePath","title","content","id","console","log","resDataField","creator","createdAt","updatedPosts","postIndex","findIndex","length","pop","unshift","err","error","statusInputChangeHandler","input","value","deletePostHandler","errorHandler","user","textAlign","marginTop","bind","Math","ceil","name","Date","toLocaleDateString"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\n\nimport Post from '../../components/Feed/Post/Post';\nimport Button from '../../components/Button/Button';\nimport FeedEdit from '../../components/Feed/FeedEdit/FeedEdit';\nimport Input from '../../components/Form/Input/Input';\nimport Paginator from '../../components/Paginator/Paginator';\nimport Loader from '../../components/Loader/Loader';\nimport ErrorHandler from '../../components/ErrorHandler/ErrorHandler';\nimport './Feed.css';\n\nclass Feed extends Component {\n  state = {\n    isEditing: false,\n    posts: [],\n    totalPosts: 0,\n    editPost: null,\n    status: '',\n    postPage: 1,\n    postsLoading: true,\n    editLoading: false\n  };\n\n  componentDidMount() {\n\n    const graphqlQuery = {\n      query: `\n        {\n          user {\n            status\n          }\n        }\n      \n      `\n    }\n\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(resData => {\n          if(resData.errors){\n            throw new Error('Fetching Status Failed!')\n          }\n        this.setState({ status: resData.data.user.status });\n      })\n      .catch(this.catchError);\n\n    this.loadPosts(); \n  }\n\n  loadPosts = direction => {\n    if (direction) {\n      this.setState({ postsLoading: true, posts: [] });\n    }\n    let page = this.state.postPage;\n    if (direction === 'next') {\n      page++;\n      this.setState({ postPage: page });\n    }\n    if (direction === 'previous') {\n      page--;\n      this.setState({ postPage: page });\n    }\n    const graphqlQuery = {\n      query: `\n        query FetchPosts($page: Int) {\n          posts(page: $page) {\n            posts {\n              _id\n              title\n              imageUrl\n              content\n              creator {\n                name\n              }\n              createdAt\n            }\n            totalPosts\n          }\n        }\n      `,\n      variables: {\n        page: page\n      }\n    }\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(resData => {\n        if(resData.errors){\n          throw new Error('Fetching Posts Failed!')\n        }\n        this.setState({\n          posts: resData.data.posts.posts.map(post => {\n            return {\n              ...post,\n              imagePath: post.imageUrl\n            }\n          }),\n          totalPosts: resData.data.posts.totalPosts,\n          postsLoading: false\n        });\n      })\n      .catch(this.catchError);\n  };\n\n  statusUpdateHandler = event => {\n    event.preventDefault();\n    const graphqlQuery = {\n      query: `\n        mutation updateUserStatus($userStatus: String!) {\n          updateStatus(status: $userStatus) {\n            status\n          }\n        }\n      `,\n      variables: {\n        userStatus: this.state.status\n      }\n    }\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(resData => {\n        if(resData.errors){\n          throw new Error('Updating Status Failed!')\n        }\n        // console.log(resData);\n      })\n      .catch(this.catchError);\n  };\n\n  newPostHandler = () => {\n    this.setState({ isEditing: true });\n  };\n\n  startEditPostHandler = postId => {\n    this.setState(prevState => {\n      const loadedPost = { ...prevState.posts.find(p => p._id === postId) };\n\n      return {\n        isEditing: true,\n        editPost: loadedPost\n      };\n    });\n  };\n\n  cancelEditHandler = () => {\n    this.setState({ isEditing: false, editPost: null });\n  };\n\n  finishEditHandler = postData => {\n    this.setState({\n      editLoading: true\n    });\n    const formData = new FormData();\n    formData.append('image', postData.image);\n    if(this.state.editPost) {\n      formData.append('oldPath', this.state.editPost.imagePath)\n    }\n\n    fetch('http://localhost:8080/post-image', {\n      method: 'PUT',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token\n      },\n      body: formData\n    })\n      .then(res => res.json())\n      .then(fileResData => {\n        const imageUrl = fileResData.filePath || 'undefined';\n        let graphqlQuery = {\n          query: `\n            mutation PutPost($title: String!, $content: String!, $imageurl: String!){\n              createPost(postInput:{title: $title, \n                                    content: $content, \n                                    imageUrl: $imageUrl }) {\n                _id\n                title\n                content\n                imageUrl\n                creator {\n                  name\n                }\n                createdAt\n              }\n            }\n    \n          `,\n          variables: {\n            title: postData.title,\n            content: postData.content,\n            imageUrl: imageUrl\n          }\n        }\n\n        if(this.state.editPost) {\n          graphqlQuery = {\n            query: `\n            mutation EditPost( $id: ID!, $title: String!, $content: String!, $imageurl: String! ) {\n              updatePost(id: $id, postInput: {\n                                    title: $title, \n                                    content: $content, \n                                    imageUrl: $imageUrl} ) {\n                _id\n                title\n                content\n                imageUrl\n                creator {\n                  name\n                }\n                createdAt\n              }\n            }\n          `,\n          variables: {\n            id: this.state.editPost._id,\n            title: postData.title,\n            content: postData.content,\n            imageUrl: imageUrl\n          }\n          }\n        }\n\n        return fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          body: JSON.stringify(graphqlQuery),\n          headers: {\n            Authorization: 'Bearer ' + this.props.token,\n            'Content-Type' : 'application/json'\n          }\n        })\n      })\n      .then(res => {  \n        return res.json();\n      })\n      .then(resData => {\n        if (resData.errors && resData.errors[0].status === 422) {\n          throw new Error(\n            \"Validation failed. Make sure the email address isn't used yet!\"\n          );\n        }\n        if(resData.errors){\n          console.log(resData.errors)\n          throw new Error('Post Updation Failed!')\n        }\n        let resDataField = 'createPost'\n        if(this.state.editPost) {\n          resDataField = 'updatePost'\n        }\n        const post = {\n          _id: resData.data[resDataField]._id,\n          title: resData.data[resDataField].title,\n          content: resData.data[resDataField].content,\n          creator: resData.data[resDataField].creator,\n          createdAt: resData.data[resDataField].createdAt,\n          imagePath: resData.data[resDataField].imageUrl\n        };\n        this.setState(prevState => {\n          let updatedPosts = [...prevState.posts];\n          if (prevState.editPost) {\n            const postIndex = prevState.posts.findIndex(\n              p => p._id === prevState.editPost._id\n            );\n            updatedPosts[postIndex] = post;\n          } else {\n            if (prevState.posts.length >= 2) {\n              updatedPosts.pop();\n          }\n            updatedPosts.unshift(post);\n          }\n          return {\n            posts: updatedPosts,\n            isEditing: false,\n            editPost: null,\n            editLoading: false\n          };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          isEditing: false,\n          editPost: null,\n          editLoading: false,\n          error: err\n        });\n      });\n  };\n\n  statusInputChangeHandler = (input, value) => {\n    this.setState({ status: value });\n  };\n\n  deletePostHandler = postId => {\n    this.setState({ postsLoading: true });\n    const graphqlQuery = {\n      query: `\n      mutation DeletePost($id: ID) {\n        deletePost(id: $id)\n      }\n\n    `,\n    variables: {\n      id: postId\n    }\n    }\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token,\n        'Content-Type' : 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(resData => {\n        if(resData.errors){\n          console.log(resData.errors)\n          throw new Error('Deletion Failed!')\n        }\n        console.log(resData);\n        this.loadPosts();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ postsLoading: false });\n      });\n  };\n\n  errorHandler = () => {\n    this.setState({ error: null });\n  };\n\n  catchError = error => {\n    this.setState({ error: error });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <ErrorHandler error={this.state.error} onHandle={this.errorHandler} />\n        <FeedEdit\n          editing={this.state.isEditing}\n          selectedPost={this.state.editPost}\n          loading={this.state.editLoading}\n          onCancelEdit={this.cancelEditHandler}\n          onFinishEdit={this.finishEditHandler}\n        />\n        <section className=\"feed__status\">\n          <form onSubmit={this.statusUpdateHandler}>\n            <Input\n              type=\"text\"\n              placeholder=\"Your status\"\n              control=\"input\"\n              onChange={this.statusInputChangeHandler}\n              value={this.state.status}\n            />\n            <Button mode=\"flat\" type=\"submit\">\n              Update\n            </Button>\n          </form>\n        </section>\n        <section className=\"feed__control\">\n          <Button mode=\"raised\" design=\"accent\" onClick={this.newPostHandler}>\n            New Post\n          </Button>\n        </section>\n        <section className=\"feed\">\n          {this.state.postsLoading && (\n            <div style={{ textAlign: 'center', marginTop: '2rem' }}>\n              <Loader />\n            </div>\n          )}\n          {this.state.posts.length <= 0 && !this.state.postsLoading ? (\n            <p style={{ textAlign: 'center' }}>No posts found.</p>\n          ) : null}\n          {!this.state.postsLoading && (\n            <Paginator\n              onPrevious={this.loadPosts.bind(this, 'previous')}\n              onNext={this.loadPosts.bind(this, 'next')}\n              lastPage={Math.ceil(this.state.totalPosts / 2)}\n              currentPage={this.state.postPage}\n            >\n              {this.state.posts.map(post => (\n                <Post\n                  key={post._id}\n                  id={post._id}\n                  author={post.creator.name}\n                  date={new Date(post.createdAt).toLocaleDateString('en-US')}\n                  title={post.title}\n                  image={post.imageUrl}\n                  content={post.content}\n                  onStartEdit={this.startEditPostHandler.bind(this, post._id)}\n                  onDelete={this.deletePostHandler.bind(this, post._id)}\n                />\n              ))}\n            </Paginator>\n          )}\n        </section>\n      </Fragment>\n    );\n  }\n}\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}